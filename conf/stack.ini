# Devstack2 local configuration

# When a value looks like a bash variable + default then it is parsed like a bash 
# variable and will perform similar lookups. Ie ${SQL_HOST:-localhost} will
# look in environment variable SQL_HOST and if that does not exist then
# localhost will be used instead.

[default]

# Set api host endpoint
host_ip = ${HOST_IP:-}

# Sys log enabled or not
syslog = 0

[db]

# Where you db is located at and how to access it
sql_host = ${SQL_HOST:-localhost}
sql_user = ${SQL_USER:-root}
port = ${SQL_PORT:-3306}

#internal commands are dependent on this...
type = mysql

[nova]

# Nova original used project_id as the *account* that owned resources (servers,
# ip address, ...)   With the addition of Keystone we have standardized on the
# term **tenant** as the entity that owns the resources.  **novaclient** still
# uses the old deprecated terms project_id.  Note that this field should now be
# set to tenant_name, not tenant_id.
nova_project_id = ${TENANT:-demo}

# In addition to the owning entity (tenant), nova stores the entity performing
# the action as the **user**.
nova_username = ${USERNAME:-demo}

# With Keystone you pass the keystone password instead of an api key.
# The most recent versions of novaclient use NOVA_PASSWORD instead of NOVA_API_KEY
nova_password = ${ADMIN_PASSWORD:-secrete}

# With the addition of Keystone, to use an openstack cloud you should
# authenticate against keystone, which returns a **Token** and **Service
# Catalog**.  The catalog contains the endpoint for all services the user/tenant
# has access to - including nova, glance, keystone, swift, ...  We currently
# recommend using the 2.0 *auth api*.
#
# *NOTE*: Using the 2.0 *auth api* does not mean that compute api is 2.0.  We
# will use the 1.1 *compute api*
nova_url = ${NOVA_URL:-http://$HOST_IP:5000/v2.0/}

# Currently novaclient needs you to specify the *compute api* version.  This
# needs to match the config of your catalog returned by Keystone.
nova_version = ${NOVA_VERSION:-1.1}

[ec2]

# Set the ec2 url so euca2ools works
ec2_url = ${EC2_URL:-http://$HOST_IP:8773/services/Cloud}

# Access key is set in the initial keystone data to be the same as username
ec2_access_key = ${USERNAME:-demo}

# Secret key is set in the initial keystone data to the admin password
ec2_secret_key = ${ADMIN_PASSWORD:-secrete}

[vm]

# Max time till the vm is bootable
boot_timeout = ${BOOT_TIMEOUT:-15}

# Max time to wait while vm goes from build to active state
active_timeout = ${ACTIVE_TIMEOUT:-10}

# Max time from run instance command until it is running
running_timeout = ${RUNNING_TIMEOUT:-$(($active_timeout + $active_timeout))}

# Max time to wait for proper IP association and dis-association.
associate_timeout = ${ASSOCIATE_TIMEOUT:-10}

[git]

# compute service
nova_repo = https://github.com/openstack/nova.git
nova_branch = master

# storage service
swift_repo = https://github.com/openstack/swift.git
swift_branch = master

# swift and keystone integration
swift_keystone_repo = https://github.com/cloudbuilders/swift-keystone2.git
swift_keystone_branch = master

# image catalog service
glance_repo = https://github.com/openstack/glance.git
glance_branch = master

# unified auth system (manages accounts/tokens)
keystone_repo = https://github.com/openstack/keystone.git
keystone_branch = stable/diablo

# a websockets/html5 or flash powered VNC console for vm instances
novnc_repo = https://github.com/cloudbuilders/noVNC.git
novnc_branch = master

# django powered web control panel for openstack
horizon_repo = https://github.com/openstack/horizon.git
horizon_branch = master

# python client library to nova that horizon (and others) use
novaclient_repo = https://github.com/openstack/python-novaclient.git
novaclient_branch = master

# openstackx is a collection of extensions to openstack.compute & nova
# that is *deprecated*.  The code is being moved into python-novaclient & nova.
openstackx_repo = https://github.com/cloudbuilders/openstackx.git
openstackx_branch = master

# quantum service
quantum_repo = https://github.com/openstack/quantum
quantum_branch = master

[ci]

# CI test suite
citest_repo = https://github.com/openstack/tempest.git
citest_branch = master

[img]

# Specify a comma-separated list of uec images to download and install into glance.
# supported urls here are:
#  * "uec-style" images:
#     If the file ends in .tar.gz, uncompress the tarball and and select the first
#     .img file inside it as the image.  If present, use "*-vmlinuz*" as the kernel
#     and "*-initrd*" as the ramdisk
#     example: http://cloud-images.ubuntu.com/releases/oneiric/release/ubuntu-11.10-server-cloudimg-amd64.tar.gz
#  * disk image (*.img,*.img.gz)
#    if file ends in .img, then it will be uploaded and registered as a to
#    glance as a disk image.  If it ends in .gz, it is uncompressed first.
#    example:
#      http://cloud-images.ubuntu.com/releases/oneiric/release/ubuntu-11.10-server-cloudimg-armel-disk1.img
#      http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-rootfs.img.gz

# old ttylinux-uec image
#image_urls="http://smoser.brickies.net/ubuntu/ttylinux-uec/ttylinux-uec-amd64-11.2_2.6.35-15_1.tar.gz" 
# cirros full disk image
#image_urls="http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img" 

# uec style cirros image
image_urls = "http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-uec.tar.gz"

[passwords]

sql = ${MYSQL_PASSWORD:-}
rabbit = ${RABBIT_PASSWORD:-}
horizon_keystone_admin = ${ADMIN_PASSWORD:-}
service_token = ${SERVICE_TOKEN:-}

